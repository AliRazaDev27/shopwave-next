/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/zZdz2G4Kvii
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Gabarito } from 'next/font/google'

gabarito({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
// TODO: add proper calculation for price update
"use client"
import Image from "next/image"
import { useContext } from "react"
import { CartContext } from "@/app/cartContext"
import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Separator } from "@/components/ui/separator"

export function Checkout() {
  const { cart } = useContext(CartContext)
  // const cartItems
  // const cartItems = [
  //   {
  //     id: 1,
  //     image: "/placeholder.svg",
  //     title: "Acme Circles T-Shirt",
  //     price: 49.99,
  //     quantity: 2,
  //   },
  //   {
  //     id: 2,
  //     image: "/placeholder.svg",
  //     title: "Comfy Hoodie",
  //     price: 59.99,
  //     quantity: 1,
  //   },
  //   {
  //     id: 3,
  //     image: "/placeholder.svg",
  //     title: "Denim Jeans",
  //     price: 79.99,
  //     quantity: 1,
  //   },
  // ]
  const [total, setTotal] = useState(0)
  useEffect(() => {
    const newTotal = cart.reduce((acc, item) => acc + item.price * item.quantity, 0)
    setTotal(newTotal)
  }, [cart])
  const handleRemove = (id) => { }
  return (
    (<div className="container mx-auto px-4 md:px-6 py-12">
      <h1 className="text-3xl font-bold mb-8">Your Cart</h1>
      <div className="grid gap-8">
        {cart.map((item) => (
          <div key={item._id} className="grid grid-cols-[120px_1fr] items-center gap-6">
            <Image
              src={item.picture.picture_url}
              alt={item.title}
              width={120}
              height={120}
              className="rounded-lg object-cover" />
            <div className="grid gap-2">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold">{item.title}</h3>
                <div className="flex items-center gap-2">
                  <span className="text-lg font-semibold">${(item.price * item.quantity).toFixed(2)}</span>
                  <Button size="icon" variant="ghost" onClick={() => handleRemove(item._id)}>
                    <TrashIcon className="h-5 w-5" />
                    <span className="sr-only">Remove {item.title}</span>
                  </Button>
                </div>
              </div>
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <Label htmlFor={`quantity-${item._id}`}>Qty:</Label>
                  <Select id={`quantity-${item._id}`} defaultValue={item.quantity} className="w-20">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {Array.from({ length: 10 }, (_, i) => i + 1).map((qty) => (
                        <SelectItem key={qty} value={qty}>
                          {qty}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      <Separator className="my-8" />
      <div className="flex justify-between items-center">
        <div className="text-lg font-semibold">
          Total: <span className="text-4xl">${total.toFixed(2)}</span>
        </div>
        <Button size="lg">Proceed to Checkout</Button>
      </div>
    </div>)
  );
}

function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}
