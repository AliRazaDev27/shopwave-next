/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/L6J9EN2J1q6
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { useSearchParams } from "next/navigation"
import { useRouter } from "next/navigation"
import { useState, useRef } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"

export function ShopControlls({ _categories }) {
  console.log(_categories)
  const searchParams = useSearchParams()
  const router = useRouter()
  const [selectedCategory, setSelectedCategory] = useState("")
  const [sortOption, setSortOption] = useState("newest")
  const [search, setSearch] = useState("")
  const data = JSON.parse(_categories)
  const categories = data?.categories || data
  console.log(data)
  console.log(categories)
  const sortOptions = [
    { value: "newest", label: "Newest" },
    { value: "low", label: "Price: Low to High" },
    { value: "high", label: "Price: High to Low" },
  ]
  function handleFilter() {
    console.log("filter")
    const data = {
      page: searchParams.get("page") || 1,
      search: search,
      categorySlug: selectedCategory,
      sort: sortOption,
    }
    router.push(`/shop?${new URLSearchParams(data).toString()}`)
    console.log(data)
  }
  function handleReset() {
    setSearch("")
    setSelectedCategory("")
    setSortOption("newest")
    router.push("/shop")
  }
  return (
    (<div
      className="flex items-center gap-4 bg-background p-4 w-[90%] mx-auto rounded-lg shadow-lg">
      <div className="relative flex-1">
        <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
        <Input
          type="search"
          name="search"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Search products..."
          className="w-full pl-8 rounded-md bg-muted" />
      </div>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" className="flex items-center gap-2">
            <span>{selectedCategory || "Category"}</span>
            <ChevronDownIcon className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="w-[200px]">
          <DropdownMenuItem onSelect={() => setSelectedCategory("All")}>All</DropdownMenuItem>
          {categories.map((category) => (
            <DropdownMenuItem key={category._id} onSelect={() => setSelectedCategory(category.slug)}>
              {category.name.toUpperCase()}
            </DropdownMenuItem>
          ))}
        </DropdownMenuContent>
      </DropdownMenu>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" className="flex items-center gap-2">
            <span>{sortOptions.find((option) => option.value === sortOption)?.label || "Sort"}</span>
            <ChevronDownIcon className="h-4 w-4" />
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="w-[200px]">
          {sortOptions.map((option) => (
            <DropdownMenuItem key={option.value} onSelect={() => setSortOption(option.value)}>
              {option.label}
            </DropdownMenuItem>
          ))}
        </DropdownMenuContent>
      </DropdownMenu>
      <Button onClick={() => handleFilter()}>Filter</Button>
      <Button onClick={() => handleReset()}>Reset</Button>
    </div>)
  );
}

function ChevronDownIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m6 9 6 6 6-6" />
    </svg>)
  );
}
